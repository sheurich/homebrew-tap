# .github/workflows/auto-merge-bump-pr.yml
# Automatically validate and merge bump PRs. Runs unattended.
# Validates only bump-* branches created by the bump action.

---
name: Validate and Auto-Merge Bump PR (Dynamic)

'on':
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: auto-merge-bump-pr-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  validate-and-merge:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    # Only for bump-* branches - temporarily permissive for debugging
    if: startsWith(github.head_ref, 'bump-')

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Configure Git
        run: |
          git config --global init.defaultBranch main
          git config --global advice.defaultBranchName false

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
        env:
          HOMEBREW_NO_ENV_HINTS: 1

      - name: Cache Homebrew Bundler RubyGems
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.set-up-homebrew.outputs.gems-path }}
          key: ${{ runner.os }}-rubygems-${{ steps.set-up-homebrew.outputs.gems-hash }}
          restore-keys: ${{ runner.os }}-rubygems-

      - name: Install Homebrew Bundler RubyGems (if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        run: brew install-bundler-gems

      - name: Debug PR information
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          PR_USER: ${{ github.event.pull_request.user.login }}
          HEAD_REF: ${{ github.head_ref }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "=== PR Debug Information ==="
          echo "Actor: $GITHUB_ACTOR"
          echo "PR User: $PR_USER"
          echo "Head Ref: $HEAD_REF"
          echo "PR Title: $PR_TITLE"
          echo "PR Number: $PR_NUMBER"
          echo "=== End Debug ==="

      - name: Validate PR and determine formula name
        id: formula_info
        env:
          PR_HEAD_REF: ${{ github.head_ref }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          # Derive names safely, quoting all variables to avoid word splitting/globbing
          FORMULA_SIMPLE_NAME="$(printf '%s' "$PR_HEAD_REF" | sed -E 's/^bump-([^-]+)-.*/\1/')"
          TAP_NAME="sheurich/tap"
          FORMULA_FULL_NAME="$TAP_NAME/$FORMULA_SIMPLE_NAME"
          
          # Validate formula name extraction
          if [[ -z "$FORMULA_SIMPLE_NAME" || "$FORMULA_SIMPLE_NAME" == "$PR_HEAD_REF" ]]; then
            echo "‚ùå Failed to extract formula name from branch: $PR_HEAD_REF"
            exit 1
          fi
          
          # Check if formula file exists
          if [[ ! -f "Formula/$FORMULA_SIMPLE_NAME.rb" ]]; then
            echo "‚ùå Formula file not found: Formula/$FORMULA_SIMPLE_NAME.rb"
            exit 1
          fi
          
          echo "‚úÖ Validated PR for formula: $FORMULA_SIMPLE_NAME"
          echo "  Branch: $PR_HEAD_REF"
          echo "  Title: $PR_TITLE"
          echo "  Formula file: Formula/$FORMULA_SIMPLE_NAME.rb"
          
          {
            printf 'formula_simple_name=%s\n' "$FORMULA_SIMPLE_NAME"
            printf 'formula_full_name=%s\n' "$FORMULA_FULL_NAME"
            printf 'tap_name=%s\n' "$TAP_NAME"
          } >> "$GITHUB_OUTPUT"

      - name: Run brew style
        env:
          FORMULA_FULL_NAME: ${{ steps.formula_info.outputs.formula_full_name }}
        run: |
          echo "Running style for: $FORMULA_FULL_NAME"
          brew style "$FORMULA_FULL_NAME"

      - name: Run brew audit
        env:
          FORMULA_FULL_NAME: ${{ steps.formula_info.outputs.formula_full_name }}
        run: |
          echo "Auditing: $FORMULA_FULL_NAME"
          brew audit --online "$FORMULA_FULL_NAME"

      - name: Run brew install and test
        env:
          FORMULA_FULL_NAME: ${{ steps.formula_info.outputs.formula_full_name }}
          HOMEBREW_NO_INSTALL_CLEANUP: 1
          HOMEBREW_NO_ENV_HINTS: 1
        run: |
          set -e
          echo "Installing from source: $FORMULA_FULL_NAME"
          
          # Track timing
          START_TIME=$(date +%s)
          
          if brew install --build-from-source "$FORMULA_FULL_NAME"; then
            INSTALL_TIME=$(($(date +%s) - START_TIME))
            echo "‚úÖ Installation successful (${INSTALL_TIME}s)"
            
            echo "Testing formula: $FORMULA_FULL_NAME"
            TEST_START=$(date +%s)
            if brew test "$FORMULA_FULL_NAME"; then
              TEST_TIME=$(($(date +%s) - TEST_START))
              echo "‚úÖ Tests passed (${TEST_TIME}s)"
            else
              echo "‚ùå Tests failed"
              brew uninstall "$FORMULA_FULL_NAME" || true
              exit 1
            fi
            
            echo "Uninstalling formula: $FORMULA_FULL_NAME"
            brew uninstall "$FORMULA_FULL_NAME"
            TOTAL_TIME=$(($(date +%s) - START_TIME))
            echo "‚úÖ Cleanup successful (total: ${TOTAL_TIME}s)"
          else
            echo "‚ùå Installation failed"
            exit 1
          fi

      - name: Auto-merge PR
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_BRANCH: ${{ github.event.pull_request.head.ref }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_AUTHOR: ${{ github.actor }}
        run: |
          echo "Attempting to merge PR #${PR_NUMBER}"
          echo "  Branch: ${PR_BRANCH}"
          echo "  Title: ${PR_TITLE}"
          echo "  Author: ${PR_AUTHOR}"
          
          # Respect checks; do not override protections
          if gh pr merge "$PR_NUMBER" --squash --delete-branch; then
            echo "‚úÖ Successfully merged PR #${PR_NUMBER} and deleted branch: ${PR_BRANCH}"
            echo "üèÜ Auto-merge workflow completed successfully!"
            echo "  Formula: $(echo "$PR_TITLE" | cut -d' ' -f1)"
            echo "  Version: $(echo "$PR_TITLE" | cut -d' ' -f2)"
            echo "  Validation: All checks passed"
          else
            echo "‚ùå Failed to merge PR #${PR_NUMBER} for branch: ${PR_BRANCH}"
            echo "This could be due to:"
            echo "  - Branch protection rules requiring additional checks"
            echo "  - Merge conflicts"
            echo "  - Required status checks not passing"
            exit 1
          fi
          
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const prBranch = context.payload.pull_request.head.ref;
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `‚ùå **Auto-merge failed** for branch \`${prBranch}\`
            
            The automated validation and merge process encountered an error.
            Please check the [workflow run](${runUrl}) for details.
            
            Common issues:
            - Formula validation failures (style, audit, install, or test)
            - Branch protection rules requiring manual review
            - Network or dependency issues
            
            Manual review and merge may be required.`
            });
