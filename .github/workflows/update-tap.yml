---
name: Update Tap

on:
  schedule:
    - cron: "0 0 * * *"
    - cron: "0 12 * * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: update-tap
  cancel-in-progress: true

jobs:
  update-tap:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Update Homebrew formulae
        uses: dawidd6/action-homebrew-bump-formula@v4
        with:
          livecheck: true
          tap: sheurich/tap
          token: "${{ secrets.HOMEBREW_GITHUB_API_TOKEN }}"
          force: true
        id: bump-formula

      - name: Summarize updates
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const stepOutcome = '${{ steps.bump-formula.outcome }}';
            
            core.summary.addHeading('Update Tap Summary');
            
            if (stepOutcome === 'success') {
              core.summary.addRaw('✅ Formula update completed successfully.');
              core.summary.addRaw('\n\n- New PRs created for outdated formulae');
              core.summary.addRaw('\n- Existing PRs updated if formulae changed');
              core.summary.addRaw('\n- No action taken if all formulae are up-to-date');
            } else if (stepOutcome === 'failure') {
              core.summary.addRaw('❌ Formula update failed. Check the logs for details.');
              core.summary.addRaw('\n\nCommon failure reasons:');
              core.summary.addRaw('\n- Network or API connectivity issues');
              core.summary.addRaw('\n- Formula syntax or validation errors');
              core.summary.addRaw('\n- GitHub API rate limits');
            } else {
              core.summary.addRaw('ℹ️ Formula update was skipped or cancelled.');
            }
            
            await core.summary.write();

