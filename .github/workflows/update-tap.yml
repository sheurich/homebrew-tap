---
name: Update Tap

on:
  schedule:
    - cron: "0 0 * * *"
    - cron: "0 12 * * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: update-tap
  cancel-in-progress: true

jobs:
  update-tap:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global init.defaultBranch main
          git config --global advice.defaultBranchName false

      - name: Cleanup existing bump branches and PRs
        id: cleanup-branches
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Track timing and ensure GitHub API consistency
          START_TIME=$(date +%s)
          echo "start_time=$START_TIME" >> "$GITHUB_OUTPUT"
          echo "Workflow started at: $(date -d "@$START_TIME")"
          echo "Waiting for GitHub API consistency..."
          sleep 5
          echo "Cleaning up existing bump PRs and branches to allow fresh updates..."

      - name: Get existing bump PRs with retry
        id: get-existing-prs
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 2
          max_attempts: 3
          retry_wait_seconds: 2
          command: |
            EXISTING_PRS=$(gh pr list --state open --json number,headRefName,title | jq -r '.[] | select(.headRefName | startswith("bump-")) | "\(.headRefName): PR #\(.number) - \(.title)"')
            echo "existing_prs=$EXISTING_PRS" >> "$GITHUB_OUTPUT"
            if [[ -n "$EXISTING_PRS" ]]; then
              echo "Found existing bump PRs"
            else
              echo "No existing bump PRs found"
            fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Process existing bump PRs and cleanup
        id: process-cleanup
        env:
          GH_TOKEN: ${{ github.token }}
          EXISTING_PRS: ${{ steps.get-existing-prs.outputs.existing_prs }}
          START_TIME: ${{ steps.cleanup-branches.outputs.start_time }}
        run: |
          echo "Processing existing bump PRs..."
          
          if [[ -n "$EXISTING_PRS" ]]; then
            echo "Found existing bump PRs - closing them to create fresh ones:"
            echo "$EXISTING_PRS"
            
            # Close existing bump PRs
            gh pr list --state open --json number,headRefName | jq -r '.[] | select(.headRefName | startswith("bump-")) | .number' | while read -r pr_num; do
              echo "Closing PR #$pr_num"
              gh pr close "$pr_num" --comment "Closing to create updated bump PR with latest version" || echo "Failed to close PR #$pr_num"
            done
            
            {
              echo "existing_prs<<EOF"
              echo "$EXISTING_PRS"
              echo "EOF"
              echo "had_existing_prs=true"
              echo "start_time=$START_TIME"
            } >> "$GITHUB_OUTPUT"
          else
            echo "No existing bump PRs found"
            {
              echo "had_existing_prs=false"
              echo "start_time=$START_TIME"
            } >> "$GITHUB_OUTPUT"
          fi
          
          # Delete ALL bump- branches (both from closed PRs and any orphaned ones)
          BUMP_BRANCHES=$(git ls-remote --heads origin 'bump-*' | awk '{print $2}' | sed 's|refs/heads/||' || true)
          
          if [[ -n "$BUMP_BRANCHES" ]]; then
            echo "Deleting all bump branches to ensure clean state:"
            for branch in $BUMP_BRANCHES; do
              echo "Deleting branch: $branch"
              git push origin --delete "$branch" || echo "Failed to delete $branch (may not exist)"
            done
          else
            echo "No bump branches found to delete"
          fi
          
          echo "Cleanup complete - ready for fresh bump PRs"
          echo "=== Post-cleanup verification ==="
          echo "Open PRs after cleanup:"
          gh pr list --state open --json number,headRefName,title | jq -r '.[] | select(.headRefName | startswith("bump-")) | "  - PR #\(.number): \(.headRefName)"' || echo "  No bump PRs found"
          echo "Remote bump branches:"
          git ls-remote --heads origin 'bump-*' | awk '{print "  - " $2}' | sed 's|refs/heads/||' || echo "  No bump branches found"
          echo "========================="

      - name: Update Homebrew formulae
        uses: dawidd6/action-homebrew-bump-formula@v4
        with:
          livecheck: true
          tap: sheurich/tap
          token: "${{ secrets.HOMEBREW_GITHUB_API_TOKEN }}"
        continue-on-error: true
        id: bump-formula
        env:
          START_TIME: ${{ steps.process-cleanup.outputs.start_time }}

      - name: Summarize updates
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const stepOutcome = '${{ steps.bump-formula.outcome }}';
            const hadExistingPrs = '${{ steps.process-cleanup.outputs.had_existing_prs }}' === 'true';
            const existingPrs = `${{ steps.process-cleanup.outputs.existing_prs }}`;
            
            core.summary.addHeading('Update Tap Summary');
            
            if (hadExistingPrs) {
              core.summary.addRaw('üß∫ **Cleaned up existing bump PRs:**');
              core.summary.addRaw('\n```');
              core.summary.addRaw('\n' + existingPrs);
              core.summary.addRaw('\n```');
              core.summary.addRaw('\n_These were closed and replaced with fresh bump PRs._\n');
            }
            
            if (stepOutcome === 'success') {
              core.summary.addRaw('‚úÖ **Formula update completed successfully**');
              if (hadExistingPrs) {
                core.summary.addRaw('\n\n- Closed existing bump PRs and created fresh ones');
                core.summary.addRaw('\n- New PRs contain the latest available versions');
              } else {
                core.summary.addRaw('\n\n- New PRs created for outdated formulae');
                core.summary.addRaw('\n- No action taken if all formulae are up-to-date');
              }
            } else if (stepOutcome === 'failure') {
              core.summary.addRaw('‚ùå **Formula update failed**');
              core.summary.addRaw('\n\nCommon failure reasons:');
              core.summary.addRaw('\n- Network or API connectivity issues');
              core.summary.addRaw('\n- Formula syntax or validation errors');
              core.summary.addRaw('\n- GitHub API rate limits');
              core.summary.addRaw('\n- Upstream source changes requiring manual intervention');
              if (hadExistingPrs) {
                core.summary.addRaw('\n\n_Note: Existing bump PRs were closed before this attempt._');
              }
            } else {
              core.summary.addRaw('‚ÑπÔ∏è Formula update was skipped or cancelled.');
            }
            
            await core.summary.write();

